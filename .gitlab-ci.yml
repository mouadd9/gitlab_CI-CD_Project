stages:
  - build # compile source code
  - test # unit + integration tests
  - security-analysis # This stage runs security and quality checks in parallel.
  - package-and-scan # # This stage packages your application into a Docker image and then scans that image for vulnerabilities.
  - publish # This final job pushes the verified and scanned Docker image to the GitLab Container Registry. It should typically only run on your main branch.

# This job compiles code and generates /target folder that contains byte code
build-job:
  stage: build
  image: eclipse-temurin:21-jdk
  script:
    - echo "Compiling code..."
    - ./mvnw clean compile
  artifacts:
    paths:
      - target/ # here we define which files to save, we save compiled code from the Runner's working directory.

unit-test-job:
  stage: test
  image: eclipse-temurin:21-jdk
  script:
    - echo "Running unit tests..."
    - ./mvnw test
  dependencies:
    - build-job # This tells the runner to download artifacts from build-job

integration-test-job:
  stage: test
  image: eclipse-temurin:21-jdk
  script:
    - echo "Running integration tests..."
    - ./mvnw failsafe:integration-test
  dependencies:
    - build-job # This tells the runner to download artifacts from build-job

sonarqube-job: # this job should run on your local runner, because the sonarQube instance is running locally
  stage: security-analysis
  image: eclipse-temurin:21-jdk
  tags:
    # the tag for the local runner that can connect to the local SonarQube
    - local-docker
  script:
    - echo "Running SonarQube analysis..."
    - ./mvnw verify sonar:sonar -Dsonar.projectKey=my-springboot-project -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login=$SONAR_TOKEN -Dsonar.qualitygate.wait=true

  dependencies:
    - build-job  # this job needs compiled code for static analysis

trivy-dependency-scan-job:
  stage: security-analysis
  script:
    - echo "Scanning dependencies for vulnerabilities..."
    # Scans the filesystem, focusing on the pom.xml

package-and-scan-job:
  stage: package-and-scan
  script:
    - echo "Packaging application and building Docker image..."
  dependencies:
    - build-job

publish-job:
  stage: publish
  script:
    - echo "Publishing Docker image..."
  rules:
    # Only run this job for commits to the main branch
    - if: '$CI_COMMIT_BRANCH == "main"'